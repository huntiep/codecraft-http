(import (syscalls *))
(import malloc)
(import (malloc alloc))
(import (malloc free))
(import (util str-eq?))
(import (util strdup))
(import (util format-uint))
(import (util hashmap))

(module Request
    (define method 0)
    (define version 4)
    (define path 8)
    (define path.len 16)
    (define headers 24)
    (define headers.len 32)
    (define headers.capacity 40)

    (define size 48)
)

(jal x1 (malloc init))

;; socket(AF_INET, SOCK_STREAM|SOCK_NONBLOCK, IPPROTO_IP)
(addi x10 x0 AF_INET)
(addi x11 x0 SOCK_STREAM)
;; SOCK_NONBLOCK
(addi x12 x0 1)
(slli x12 x12 11)
(or x11 x11 x12)
(addi x12 x0 IPPROTO_IP)
(addi x17 x0 SYS_SOCKET)
(ecall)
(blt x10 x0 socket-err)
(subi x2 x2 8)
(sd x2 x10)
;; setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, [1], 4)
(addi x11 x0 SOL_SOCKET)
(addi x12 x0 SO_REUSEADDR)
(addi x5 x0 1)
(sd (- x2 8) x5)
(addi x13 x2 -8)
(addi x14 x0 4)
(addi x17 x0 SYS_SETSOCKOPT)
(ecall)
(blt x10 x0 reuseaddr-err)
;; bind(fd, {}, 16)
(ld x10 x2)
(subi x2 x2 16)
(addi x5 x0 AF_INET)
(sh x2 x5)
;; sin_port = 4221
(addi x5 x0 0x7d)
(sb (+ x2 3) x5)
(addi x5 x0 0x10)
(sb (+ x2 2) x5)
;; sin_addr
(sw (+ x2 4) x0)
(sd (+ x2 8) x0)
(add x11 x0 x2)
(addi x12 x0 16)
(addi x17 x0 SYS_BIND)
(ecall)
(bne x10 x0 bind-err)
;; listen(fd, 16)
(ld x10 (+ x2 16))
(addi x11 x0 16)
(addi x17 x0 SYS_LISTEN)
(ecall)
(bne x10 x0 listen-err)

(module Req
    (define fd 0)
    (define continuation 8)
    (define req 16)
    (define hkey 24)
    (define hkey.len 32)
    (define buf.end 40)
    (define buf 48)
    (define buf.len 976)
    (define size 1024)
)

(addi x10 x0 (Req size))
(slli x10 x10 5)
(add x21 x0 x10)
(jal x1 alloc)
(add x20 x0 x10)
(add x21 x21 x20)
(add x23 x0 x20)
alloc-req-loop
    (addi x10 x23 (Req buf))
    (sd (+ x23 (Req buf.end)) x10)
    (addi x10 x0 (Request size))
    (jal x1 alloc)
    (sd (+ x23 (Req req)) x10)
    (addi x10 x0 1024)
    (jal x1 alloc)
    (ld x5 (+ x23 (Req req)))
    (sd (+ x5 (Request headers)) x10)
    (addi x10 x0 32)
    (sd (+ x5 (Request headers.capacity)) x10)
    (addi x23 x23 (Req size))
    (bne x23 x21 alloc-req-loop)

loop
    ;; accept4(fd, NULL, NULL, SOCK_NONBLOCK)
    (ld x10 (+ x2 16))
    (add x11 x0 x0)
    (add x12 x0 x0)
    (addi x13 x0 1)
    (slli x13 x13 11)
    (addi x17 x0 SYS_ACCEPT4)
    (ecall)
    ;; EAGAIN/EWOULDBLOCK
    (addi x5 x10 11)
    (beq x5 x0 check-sockets)
    (blt x10 x0 accept-err)
    (add x5 x0 x20)
    add-socket-loop
        (beq x5 x21 accept-err)
        (ld x6 x5)
        (addi x5 x5 (Req size))
        (bne x6 x0 add-socket-loop)
    (subi x5 x5 (Req size))
    (sd x5 x10)
    (jal x1 handle-request)
    (sd (+ x5 (Req continuation)) x31)
    (jal x0 loop)

check-sockets
    (add x22 x0 x20)
    check-sockets-loop
        (beq x22 x21 loop)
        (ld x10 x22)
        (addi x22 x22 (Req size))
        (beq x10 x0 check-sockets-loop)
        ;; read(req.fd, req.buf.end, req.buf.len)
        (subi x6 x22 (Req size))
        (ld x11 (+ x6 (Req buf.end)))
        (addi x12 x0 (Req buf.len))
        (addi x7 x6 (Req buf))
        (sub x7 x11 x7)
        (sub x12 x12 x7)
        (addi x17 x0 SYS_READ)
        (ecall)
        (addi x7 x10 11)
        (beq x7 x0 check-sockets-loop)
        (blt x10 x0 read-err)
        (add x30 x0 x0)
        (bne x10 x0 non-zero-read)
        (addi x30 x0 1)
        non-zero-read
        (ld x23 (+ x6 (Req fd)))
        (ld x24 (+ x6 (Req req)))
        (ld x25 (+ x6 (Req buf.end)))
        (add x26 x25 x10)
        (addi x27 x6 (Req buf))
        (ld x10 (+ x6 (Req hkey)))
        (ld x11 (+ x6 (Req hkey.len)))
        (ld x31 (+ x6 (Req continuation)))
        (jalr x1 x31)
        (subi x6 x22 (Req size))
        (beq x31 x0 free-request)
        (sd (+ x6 (Req continuation)) x31)
        (sd (+ x6 (Req hkey)) x10)
        (sd (+ x6 (Req hkey.len)) x11)
        (addi x5 x6 (Req buf))
        (beq x27 x25 store-buf)
        buf-move-loop
            (lb x7 x27)
            (sb x5 x7)
            (addi x27 x27 1)
            (addi x5 x5 1)
            (bne x27 x25 buf-move-loop)
        store-buf
        (sd (+ x6 (Req buf.end)) x5)
        (jal x0 check-sockets-loop)
    free-request
        ;; close(Request.fd)
        (ld x10 (+ x6 (Req fd)))
        (addi x17 x0 SYS_CLOSE)
        (ecall)
        (sd (+ x6 (Req fd)) x0)
        (addi x5 x6 (Req buf))
        (sd (+ x6 (Req buf.end)) x5)
        (sd (+ x6 (Req hkey)) x0)
        (sd (+ x6 (Req hkey.len)) x0)
        (ld x6 (+ x6 (Req req)))
        (ld x10 (+ x6 (Request path)))
        (beq x10 x0 free-headers)
        (sd (+ x6 (Request path)) x0)
        (sd (+ x6 (Request path.len)) x0)
        (jal x1 free)
    free-headers
        (subi x10 x22 (Req size))
        (ld x10 (+ x10 (Req req)))
        (addi x10 x10 (Request headers))
        (jal x1 (hashmap clear))
        (jal x0 check-sockets-loop)

;; ARGS:
;;  x23 - cfd
;;  x24 - *Request
;;  x25 - buf.start
;;  x26 - buf.end
;;  x30 - 0 bytes read?
;; RET:
;;  x25 - buf.position
;;  x26 - buf.end
;;  x27 - buf.new-start
;;  x31 - continuation
(module handle-request
    (jalr x31 x1)
    (add x27 x0 x25)
    method-loop
        (auipc x31 0)
        (beq x25 x26 eof)
        (lb x7 x25)
        (addi x25 x25 1)
        (subi x7 x7 #' ')
        (bne x7 x0 method-loop)
    (defcon GET-str "GET")
    (define GET 1)
    (defcon POST-str "POST")
    (define POST 2)
    (add x10 x0 x27)
    (sub x11 x25 x27)
    (subi x11 x11 1)
    (la x12 GET-str)
    (addi x13 x0 (len GET-str))
    (subi x2 x2 8)
    (sd x2 x1)
    (jal x1 str-eq?)
    (addi x7 x0 GET)
    (bne x10 x0 method-done)
    (add x10 x0 x27)
    (sub x11 x25 x27)
    (subi x11 x11 1)
    (la x12 POST-str)
    (addi x13 x0 (len POST-str))
    (jal x1 str-eq?)
    (addi x7 x0 POST)
    (bne x10 x0 method-done)
    ;; Unknown method
    (addi x7 x0 -1)
    method-done
    (sw (+ x24 (Request method)) x7)
    (ld x1 x2)
    (addi x2 x2 8)

    (add x27 x0 x25)
    path-loop
        (auipc x31 0)
        (beq x25 x26 eof)
        (lb x7 x25)
        (addi x25 x25 1)
        (subi x7 x7 #' ')
        (bne x7 x0 path-loop)
    (subi x2 x2 8)
    (sd x2 x1)
    (sub x10 x25 x27)
    (subi x10 x10 1)
    (jal x1 alloc)
    (add x11 x0 x27)
    (sub x12 x25 x27)
    (subi x12 x12 1)
    (sd (+ x24 (Request path)) x10)
    (sd (+ x24 (Request path.len)) x12)
    (jal x1 strdup)
    (ld x1 x2)
    (addi x2 x2 8)

    (add x27 x0 x25)
    version-loop
        (auipc x31 0)
        (beq x25 x26 eof)
        (lb x7 x25)
        (addi x25 x25 1)
        (subi x7 x7 #'\r')
        (bne x7 x0 version-loop)
    (defcon VERSION-str "HTTP/1.1")
    (define VERSION 1)
    (add x10 x0 x27)
    (sub x11 x25 x27)
    (subi x11 x11 1)
    (la x12 VERSION-str)
    (addi x13 x0 (len VERSION-str))
    (subi x2 x2 8)
    (sd x2 x1)
    (jal x1 str-eq?)
    (ld x1 x2)
    (addi x2 x2 8)
    (addi x7 x0 VERSION)
    (bne x10 x0 version-done)
    (addi x7 x0 -1)
    version-done
    (sw (+ x24 (Request version)) x7)

    (add x27 x0 x25)
    (auipc x31 0)
    (beq x25 x26 eof)
    (lb x7 x25)
    (addi x25 x25 1)
    (subi x7 x7 #'\n')
    (bne x7 x0 bad)

    headers-loop
        (auipc x31 0)
        (beq x25 x26 eof)
        (lb x7 x25)
        (addi x25 x25 1)
        (subi x7 x7 #'\r')
        (beq x7 x0 after-headers)
        (subi x25 x25 1)
        (add x27 x0 x25)
        headers-key
            (auipc x31 0)
            (beq x25 x26 eof)
            (lb x7 x25)
            (addi x25 x25 1)
            (subi x7 x7 #':')
            (bne x7 x0 headers-key)
        (sub x10 x25 x27)
        (subi x10 x10 1)
        (subi x2 x2 8)
        (sd x2 x1)
        (jal x1 alloc)
        (add x11 x0 x27)
        (sub x12 x25 x27)
        (subi x12 x12 1)
        (add x27 x0 x10)
        (jal x1 strdup)
        (ld x1 x2)
        (addi x2 x2 8)
        (sub x11 x10 x27)
        (add x10 x0 x27)
        (add x27 x0 x25)
        (auipc x31 0)
        (beq x25 x26 eof)
        (lb x7 x25)
        (addi x25 x25 1)
        (subi x7 x7 #' ')
        (bne x7 x0 bad)

        (add x27 x0 x25)
        headers-value
            (auipc x31 0)
            (beq x25 x26 eof)
            (lb x7 x25)
            (addi x25 x25 1)
            (subi x7 x7 #'\r')
            (bne x7 x0 headers-value)
        (subi x2 x2 24)
        (sd x2 x1)
        (sd (+ x2 8) x10)
        (sd (+ x2 16) x11)
        (sub x10 x25 x27)
        (subi x10 x10 1)
        (jal x1 alloc)
        (add x11 x0 x27)
        (sub x12 x25 x27)
        (subi x12 x12 1)
        (add x27 x0 x10)
        (jal x1 strdup)
        (ld x11 (+ x2 8))
        (ld x12 (+ x2 16))
        (add x13 x0 x27)
        (sub x14 x10 x13)
        (add x15 x0 x0)
        (addi x10 x24 (Request headers))
        (jal x1 (hashmap insert))
        (ld x1 x2)
        (addi x2 x2 24)

        (add x27 x0 x25)
        (auipc x31 0)
        (beq x25 x26 eof)
        (lb x7 x25)
        (addi x25 x25 1)
        (subi x7 x7 #'\n')
        (bne x7 x0 bad)
        (jal x0 headers-loop)

    after-headers
    (add x27 x0 x25)
    (auipc x31 0)
    (beq x25 x26 eof)
    (lb x7 x25)
    (addi x25 x25 1)
    (subi x7 x7 #'\n')
    (bne x7 x0 bad)

    (defcon 200-msg "HTTP/1.1 200 OK\r\n\r\n")
    (defcon 404-msg "HTTP/1.1 404 Not Found\r\n\r\n")
    (defcon content-headers "Content-Type: text/plain\r\nContent-length: ")

    200-path
    (ld x10 (+ x24 (Request path)))
    (ld x11 (+ x24 (Request path.len)))
    (subi x5 x11 1)
    (bne x5 x0 echo-path)
    (lb x5 x10)
    (subi x5 x5 #'/')
    (bne x5 x0 404-path)
    (auipc x31 0)
    (add x30 x0 x0)
    (la x11 200-msg)
    (addi x12 x0 (len 200-msg))
    (jal x0 write)

    echo-path
        (defcon echo-prefix "/echo/")
        (la x12 echo-prefix)
        (addi x13 x0 (len echo-prefix))
        (blt x11 x13 ua-path)
        (add x11 x0 x13)
        (subi x2 x2 8)
        (sd x2 x1)
        (jal x1 str-eq?)
        (ld x1 x2)
        (addi x2 x2 8)
        (beq x10 x0 ua-path)
        (auipc x31 0)
        (add x30 x0 x0)
        (add x10 x0 x23)
        (la x11 200-msg)
        (addi x12 x0 (len 200-msg))
        (subi x12 x12 2)
        (addi x17 x0 SYS_WRITE)
        (ecall)
        (addi x5 x10 11)
        (beq x5 x0 eof)
        (blt x10 x0 bad)

        (auipc x31 0)
        (add x30 x0 x0)
        (add x10 x0 x23)
        (la x11 content-headers)
        (addi x12 x0 (len content-headers))
        (addi x17 x0 SYS_WRITE)
        (ecall)
        (addi x5 x10 11)
        (beq x5 x0 eof)
        (blt x10 x0 bad)

        (auipc x31 0)
        (add x30 x0 x0)
        (ld x11 (+ x24 (Request path.len)))
        (subi x11 x11 (len echo-prefix))
        (subi x10 x2 32)
        (subi x2 x2 8)
        (sd x2 x1)
        (jal x1 format-uint)
        (ld x1 x2)
        (addi x2 x2 8)
        (addi x12 x0 #'\r')
        (addi x13 x0 #'\n')
        (sb x10 x12)
        (sb (+ x10 1) x13)
        (sb (+ x10 2) x12)
        (sb (+ x10 3) x13)
        (subi x11 x2 32)
        (sub x12 x10 x11)
        (addi x12 x12 4)
        (add x10 x0 x23)
        (addi x17 x0 SYS_WRITE)
        (ecall)
        (addi x5 x10 11)
        (beq x5 x0 eof)
        (blt x10 x0 bad)

        (auipc x31 0)
        (add x30 x0 x0)
        (ld x11 (+ x24 (Request path)))
        (ld x12 (+ x24 (Request path.len)))
        (jal x0 write)

    ua-path
        (defcon ua-path-str "/user-agent")
        (defcon ua-header "User-Agent")

        (addi x13 x0 (len ua-path-str))
        (ld x11 (+ x24 (Request path.len)))
        (bne x11 x13 404-path)
        (la x12 ua-path-str)
        (ld x10 (+ x24 (Request path)))
        (subi x2 x2 8)
        (sd x2 x1)
        (jal x1 str-eq?)
        (ld x1 x2)
        (addi x2 x2 8)
        (beq x10 x0 404-path)

        (addi x10 x24 (Request headers))
        (la x11 ua-header)
        (addi x12 x0 (len ua-header))
        (subi x2 x2 8)
        (sd x2 x1)
        (jal x1 (hashmap get))
        (ld x1 x2)
        (addi x2 x2 8)
        (beq x12 x0 404-path)
        (auipc x31 0)
        (add x30 x0 x0)
        (add x10 x0 x23)
        (la x11 200-msg)
        (addi x12 x0 (len 200-msg))
        (subi x12 x12 2)
        (addi x17 x0 SYS_WRITE)
        (ecall)
        (addi x5 x10 11)
        (beq x5 x0 eof)
        (blt x10 x0 bad)

        (auipc x31 0)
        (add x30 x0 x0)
        (add x10 x0 x23)
        (la x11 content-headers)
        (addi x12 x0 (len content-headers))
        (addi x17 x0 SYS_WRITE)
        (ecall)
        (addi x5 x10 11)
        (beq x5 x0 eof)
        (blt x10 x0 bad)

        (auipc x31 0)
        (add x30 x0 x0)
        (subi x2 x2 8)
        (sd x2 x1)
        (addi x10 x24 (Request headers))
        (la x11 ua-header)
        (addi x12 x0 (len ua-header))
        (jal x1 (hashmap get))
        (subi x10 x2 24)
        (jal x1 format-uint)
        (addi x12 x0 #'\r')
        (addi x13 x0 #'\n')
        (sb x10 x12)
        (sb (+ x10 1) x13)
        (sb (+ x10 2) x12)
        (sb (+ x10 3) x13)
        (subi x11 x2 24)
        (sub x12 x10 x11)
        (addi x12 x12 4)
        (add x10 x0 x23)
        (addi x17 x0 SYS_WRITE)
        (ecall)
        (ld x1 x2)
        (addi x2 x2 8)
        (addi x5 x10 11)
        (beq x5 x0 eof)
        (blt x10 x0 bad)

        (auipc x31 0)
        (add x30 x0 x0)
        (addi x10 x24 (Request headers))
        (la x11 ua-header)
        (addi x12 x0 (len ua-header))
        (subi x2 x2 8)
        (sd x2 x1)
        (jal x1 (hashmap get))
        (ld x1 x2)
        (addi x2 x2 8)
        (add x12 x0 x11)
        (add x11 x0 x10)
        (jal x0 write)

    404-path
        (auipc x31 0)
        (add x30 x0 x0)
        (la x11 404-msg)
        (addi x12 x0 (len 404-msg))

write
    (add x10 x0 x23)
    (addi x17 x0 SYS_WRITE)
    (ecall)
    (addi x5 x10 11)
    (beq x5 x0 eof)
    (blt x10 x0 bad)
    (add x31 x0 x0)
    (jalr x0 x1)

    eof
        (bne x30 x0 bad)
        (jalr x0 x1)
    bad
        (add x31 x0 x0)
        (jalr x0 x1)
    write-err
    (addi x10 x0 1)
    (addi x17 x0 SYS_EXIT)
    (ecall)
)

socket-err
    (defcon socket-msg "Socket creation failed\n")
    (la x11 socket-msg)
    (addi x12 x0 (len socket-msg))
    (jal x0 print-err)
reuseaddr-err
    (defcon reuseaddr-msg "SO_REUSEADDR failed\n")
    (la x11 reuseaddr-msg)
    (addi x12 x0 (len reuseaddr-msg))
    (jal x0 print-err)
bind-err
    (defcon bind-msg "Bind failed\n")
    (la x11 bind-msg)
    (addi x12 x0 (len bind-msg))
    (jal x0 print-err)
listen-err
    (defcon listen-msg "Listen failed\n")
    (la x11 listen-msg)
    (addi x12 x0 (len listen-msg))
    (jal x0 print-err)
accept-err
    (defcon accept-msg "Accept failed\n")
    (la x11 accept-msg)
    (addi x12 x0 (len accept-msg))
    (jal x0 print-err)
read-err
    (defcon read-msg "Read failed\n")
    (la x11 read-msg)
    (addi x12 x0 (len read-msg))
    (jal x0 print-err)
bad-request
    (defcon bad-msg "Bad request\n")
    (la x11 bad-msg)
    (addi x12 x0 (len bad-msg))
print-err
    (addi x10 x0 STDERR)
    (addi x17 x0 SYS_WRITE)
    (ecall)
    (addi x10 x0 1)
    (addi x17 x0 SYS_EXIT)
    (ecall)
